<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>模板类型推导</title>
    <link href="/2025/06/14/%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC/"/>
    <url>/2025/06/14/%E6%A8%A1%E6%9D%BF%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>类型推导使得程序员从冗杂的类型名拼写上解放出来，本篇文章将详细介绍模型类型推导的规则。</p><h1 id="模板类型推导的规则"><a href="#模板类型推导的规则" class="headerlink" title="模板类型推导的规则"></a>模板类型推导的规则</h1><p>考虑如下函数模版：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(ParamType param)</span></span>;<br><span class="hljs-built_in">f</span>(expr);<br></code></pre></td></tr></table></figure><p>在编译期间，编译器使用<code>expr</code>进行两个类型的推导：<code>T</code>和<code>ParamType</code>。其中，<code>ParamType</code>通常包含一些修饰，从而通常与<code>T</code>是不同的类型。<code>T</code>的类型推导不仅取决于<code>expr</code>的类型，也被<code>ParamType</code>决定，可以将其分为三种情况：</p><ul><li><code>ParamType</code>是一个指针或引用，但不是通用引用</li><li><code>ParamType</code>是一个通用引用</li><li><code>ParamType</code>既不是指针也不是引用<br>下面分别介绍三种情况下的类型推导规则</li></ul><h2 id="情况一：ParamType是一个指针或引用，但不是通用引用"><a href="#情况一：ParamType是一个指针或引用，但不是通用引用" class="headerlink" title="情况一：ParamType是一个指针或引用，但不是通用引用"></a>情况一：<code>ParamType</code>是一个指针或引用，但不是通用引用</h2><p>在该情况下，类型推导按照如下规则进行：</p><ul><li>如果<code>expr</code>的类型是一个引用，忽略引用部分</li><li><code>expr</code>的类型与<code>ParamType</code>进行模式匹配决定<code>T</code><br>对于如下模板示例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp; param)</span></span><br></code></pre></td></tr></table></figure><p>则类型推导结果如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> x = <span class="hljs-number">27</span>;          <span class="hljs-comment">// x是int</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> cx = x;    <span class="hljs-comment">// cx是const int</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; rx = x;   <span class="hljs-comment">// rx是指向const int变量x的引用</span><br><br><span class="hljs-built_in">f</span>(x);  <span class="hljs-comment">// T是int，param类型是int&amp;</span><br><span class="hljs-built_in">f</span>(cx); <span class="hljs-comment">// T是const int，param是const int&amp;</span><br><span class="hljs-built_in">f</span>(rx); <span class="hljs-comment">// T是const int，param是const int&amp;</span><br></code></pre></td></tr></table></figure><p>从上述结果中可以看出，<strong><code>const</code>对象作为实参传递给<code>T&amp;</code>形参时，<code>const</code>会被保留为<code>T</code>的一部分</strong>。</p><p>如果<code>param</code>是一个指针，对应的情况与引用基本一致：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T* param)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-type">int</span> x </span>= <span class="hljs-number">27</span>;          <span class="hljs-comment">// x是int类型</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *px = &amp;x;  <span class="hljs-comment">// px是指向const int变量的指针</span><br><br><span class="hljs-built_in">f</span>(&amp;x); <span class="hljs-comment">// T是int，param是int*</span><br><span class="hljs-built_in">f</span>(px); <span class="hljs-comment">// T是const int，param是const int*</span><br></code></pre></td></tr></table></figure><h2 id="情况二：ParamType是一个通用引用"><a href="#情况二：ParamType是一个通用引用" class="headerlink" title="情况二：ParamType是一个通用引用"></a>情况二：<code>ParamType</code>是一个通用引用</h2><p>该情况的形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp;&amp; param)</span></span><br></code></pre></td></tr></table></figure><p>对应的类型推导规则有以下几点：</p><ul><li>如果<code>expr</code>是左值，<code>T</code>和<code>ParamType</code>都会被推导为左值引用。</li><li>如果<code>expr</code>是右值，使用情况一的推导规则（<code>T</code>保留<code>const</code>属性和基本类型，<code>param</code>是右值引用）<br>下面给出对应的示例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp;&amp; param)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-type">int</span> x </span>= <span class="hljs-number">27</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> cx = x;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; rx = cx;<br><br><span class="hljs-built_in">f</span>(x);  <span class="hljs-comment">// x是左值，T是int&amp;，param也是int&amp;</span><br><span class="hljs-built_in">f</span>(cx); <span class="hljs-comment">// cx是左值，所以T是const int&amp;，param也是const int&amp;</span><br><span class="hljs-built_in">f</span>(rx); <span class="hljs-comment">// rx是左值，所以T是const int&amp;，param也是const int&amp;</span><br><span class="hljs-built_in">f</span>(<span class="hljs-number">27</span>); <span class="hljs-comment">// 27是右值，所以T是int，param类型是int&amp;&amp;</span><br></code></pre></td></tr></table></figure><h2 id="情况三：ParamType既不是指针也不是引用"><a href="#情况三：ParamType既不是指针也不是引用" class="headerlink" title="情况三：ParamType既不是指针也不是引用"></a>情况三：<code>ParamType</code>既不是指针也不是引用</h2><p>该情况下通过传值的方式处理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T param)</span></span><br></code></pre></td></tr></table></figure><p>对应如下规则：</p><ul><li>如果<code>expr</code>的类型是一个引用，忽略这个引用部分</li><li>如果忽略<code>expr</code>的引用性之后，<code>expr</code>是一个<code>const</code>，那么再忽略<code>const</code>。如果是<code>volatile</code>，也忽略<code>volatile</code>。<br>下面给出对应的示例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> x = <span class="hljs-number">27</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> cx = x;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; rx = cx;<br><br><span class="hljs-built_in">f</span>(x);  <span class="hljs-comment">// T和param的类型都是int</span><br><span class="hljs-built_in">f</span>(cx); <span class="hljs-comment">// T和param的类型都是int</span><br><span class="hljs-built_in">f</span>(rx); <span class="hljs-comment">// T和param的类型都是int</span><br></code></pre></td></tr></table></figure><p>该情况下，<code>param</code>是传入对象的拷贝，不影响传入对象。</p><p>一个例外情况是传入的是指向常量的常量指针，此时指针指向数据的常量性会被保留，而指针本身的常量性会被忽略：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T param)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-type">const</span> ptr </span>= <span class="hljs-string">&quot;Fun with pointers&quot;</span>; <span class="hljs-comment">// ptr是指向常量的常量指针</span><br><span class="hljs-built_in">f</span>(ptr); <span class="hljs-comment">// param是const char*</span><br></code></pre></td></tr></table></figure><h1 id="数组实参"><a href="#数组实参" class="headerlink" title="数组实参"></a>数组实参</h1><p>我们知道数组在某些上下文中会退化为指向它的第一个元素的指针，给出如下示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span> name[] = <span class="hljs-string">&quot;J. P. Briggs&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> * ptrToName = name;<br></code></pre></td></tr></table></figure><p>在该示例中，<code>name</code>的类型为<code>const char[13]</code>，而<code>ptrToName</code>的类型为<code>const char*</code>，但编译器允许数组退化为指针。</p><p>将数组作为实参传递给模版：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T param)</span></span>;                        <span class="hljs-comment">//传值形参的模板</span><br><br><span class="hljs-built_in">f</span>(name); <span class="hljs-comment">// T被推导为const char*                             </span><br></code></pre></td></tr></table></figure><p>有没有办法让<code>T</code>推导为数组，而不是指针呢？答案是使用传引用模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(T&amp; param)</span></span>;<br><br><span class="hljs-built_in">f</span>(name);<br></code></pre></td></tr></table></figure><p>此时T会被推导为真正的数组<code>const char[13]</code>，形参类型为<code>const char (&amp;)char[13]</code>。</p><p>我们可以根据这一性质创建一个模板函数推导数组的大小：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, std::<span class="hljs-type">size_t</span> N&gt;<br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> std::<span class="hljs-type">size_t</span> <span class="hljs-title">arraySize</span><span class="hljs-params">(T (&amp;)[N])</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> N;<br>&#125;<br><br><span class="hljs-type">int</span> keyVals[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">35</span>&#125;;<br><br><span class="hljs-type">int</span> mappedVals[<span class="hljs-built_in">arraySize</span>(keyVals)]; <span class="hljs-comment">// 使用一个数组的大小声明另一个数组</span><br></code></pre></td></tr></table></figure><h1 id="函数实参"><a href="#函数实参" class="headerlink" title="函数实参"></a>函数实参</h1><p>函数类型也会退化为函数指针，对于数组类型的推导可以应用到函数类型退化到函数指针上来：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">someFunc</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">double</span>)</span></span>;         <span class="hljs-comment">//someFunc是一个函数，</span><br>                                    <span class="hljs-comment">//类型是void(int, double)</span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">(T param)</span></span>;                   <span class="hljs-comment">//传值给f1</span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(T &amp; param)</span></span>;                 <span class="hljs-comment">//传引用给f2</span><br><br><span class="hljs-built_in">f1</span>(someFunc);                       <span class="hljs-comment">//param被推导为指向函数的指针，</span><br>                                    <span class="hljs-comment">//类型是void(*)(int, double)</span><br><span class="hljs-built_in">f2</span>(someFunc);                       <span class="hljs-comment">//param被推导为指向函数的引用，</span><br>                                    <span class="hljs-comment">//类型是void(&amp;)(int, double)</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://cntransgroup.github.io/EffectiveModernCppChinese/1.DeducingTypes/item1.html">类型推导</a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modern C++</tag>
      
      <tag>类型推导</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>std::move与std::forward</title>
    <link href="/2025/06/11/move%E4%B8%8Eforward/"/>
    <url>/2025/06/11/move%E4%B8%8Eforward/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章主要介绍<code>std::move</code>与<code>std::forward</code>的实现原理。</p><h1 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h1><p>在讲解两个函数之前，首先需要了解<code>static_cast</code>的作用。<code>static_cast</code>是C++中的一种 显式类型转换 运算符，用于在类型之间安全地进行编译期转换。其基本语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">static_cast</span>&lt;T&gt;(expr) <span class="hljs-comment">// 将expr转换为T类型</span><br></code></pre></td></tr></table></figure><p>其主要用法有：<br>（1）用于基本数据类型之间的转换，如把int转换为char，把int转换成enum，但这种转换的安全性需要开发者自己保证（这可以理解为保证数据的精度，即程序员能不能保证自己想要的程序安全），如在把int转换为char时，如果char没有足够的比特位来存放int的值（int&gt;127或int&lt;-127时），那么static_cast所做的只是简单的截断，即简单地把int的低8位复制到char的8位中，并直接抛弃高位<br>（2）把空指针转换成目标类型的空指针<br>（3）把任何类型的表达式类型转换成void类型<br>（4）用于类层次结构中父类和子类之间指针和引用的转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">double</span> d = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(d); <span class="hljs-comment">// 从 double 转成 int，结果是 3</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">public</span> Base &#123;&#125;;<br><br>Derived d;<br>Base* pb = <span class="hljs-built_in">static_cast</span>&lt;Base*&gt;(&amp;d); <span class="hljs-comment">// 子类 → 父类，安全</span><br><br>Base* pb2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Derived</span>();<br>Derived* pd2 = <span class="hljs-built_in">static_cast</span>&lt;Derived*&gt;(pb2); <span class="hljs-comment">// 编译通过，但要小心类型是否真的匹配</span><br><br><span class="hljs-type">void</span>* pv = <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-type">int</span>* pi = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>*&gt;(pv); <span class="hljs-comment">// 从 void* 转回 int*，常见于 C 接口</span><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123; Red, Green, Blue &#125;;<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(Green); <span class="hljs-comment">// 枚举 → 整型</span><br></code></pre></td></tr></table></figure><h1 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a>std::move</h1><p><code>std::move()</code>函数主要用于获取右值引用，其实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/// include/bits/move.h</span><br>  <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt;<br>    _GLIBCXX_NODISCARD<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">typename</span> std::remove_reference&lt;_Tp&gt;::<span class="hljs-function">type&amp;&amp;</span><br><span class="hljs-function">    <span class="hljs-title">move</span><span class="hljs-params">(_Tp&amp;&amp; <span class="hljs-type">__t</span>)</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">typename</span> std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(<span class="hljs-type">__t</span>); &#125;<br></code></pre></td></tr></table></figure><ul><li><code>_GLIBCXX_NODISCARD</code>是一个宏，通常会展开为<code>[[nodiscard]]</code>，表示调用者不应忽略该函数的返回值</li><li><code>std::remove_reference&lt;_Tp&gt;::type&amp;&amp;</code>是函数的返回类型<ul><li><code>std::remove_reference&lt;_Tp&gt;::type</code>用于去掉<code>_Tp</code>上的引用（如果有）</li><li><code>&amp;&amp;</code>表示返回该类型的右值引用</li></ul></li><li><code>move(_Tp&amp;&amp; __t) noexcept</code>是函数名的参数部分<ul><li><code>_Tp&amp;&amp; __t</code>是万能引用（forwarding reference），它可以匹配左值引用或右值引用</li><li>noexcept 表示这个函数不会抛出异常</li></ul></li><li><code>&#123; return static_cast&lt;typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(__t); &#125;</code>将<code>__t</code>显式地转成右值引用。这是实现“右值强制转换”的关键<br>下面给出一个使用的示例，以说明<code>std::move</code>的原理：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp;&amp; rx = std::<span class="hljs-built_in">move</span>(x);  <span class="hljs-comment">// ok，把 x 转成右值引用</span><br><br><span class="hljs-type">int</span>&amp; a = x;<br><span class="hljs-type">int</span>&amp;&amp; ra = std::<span class="hljs-built_in">move</span>(a);<br></code></pre></td></tr></table></figure><p>x是左值，对应的<code>_Tp</code>为int，返回值为<code>int&amp;&amp;</code>。a的类型为<code>int&amp;</code>，去掉引用后转为<code>int&amp;&amp;</code>。</p><h1 id="std-forward"><a href="#std-forward" class="headerlink" title="std::forward"></a>std::forward</h1><blockquote><p><code>std::forward</code>是C++中用于<strong>完美转发（perfect forwarding）<strong>的核心工具，它的目的是</strong>在模板中把参数“原封不动”地传给另一个函数，保持它原本的左值或右值性质</strong>。</p></blockquote><p>万能引用不是已经可以获得右值引用吗？为什么还需要<code>std::forward</code>呢？给出如下示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">const</span> Widget&amp; lvalArg)</span></span>;        <span class="hljs-comment">//处理左值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(Widget&amp;&amp; rvalArg)</span></span>;             <span class="hljs-comment">//处理右值</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;                        <span class="hljs-comment">//用以转发param到process的模板</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">logAndProcess</span><span class="hljs-params">(T&amp;&amp; param)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> now =                              <span class="hljs-comment">//获取现在时间</span><br>        std::chrono::system_clock::<span class="hljs-built_in">now</span>();<br>    <br>    <span class="hljs-built_in">makeLogEntry</span>(<span class="hljs-string">&quot;Calling &#x27;process&#x27;&quot;</span>, now);<br>    <span class="hljs-built_in">process</span>(param);<br>&#125;<br><br>Widget w;<br><br><span class="hljs-built_in">logAndProcess</span>(w);               <span class="hljs-comment">//用左值调用</span><br><span class="hljs-built_in">logAndProcess</span>(std::<span class="hljs-built_in">move</span>(w));    <span class="hljs-comment">//用右值调用</span><br></code></pre></td></tr></table></figure><p>我们希望传入左值实参和右值实参时，能够使用对应版本的<code>process()</code>函数进行处理，然而，C++中形参永远是左值，即使是如下函数，形参<code>w</code>依然是左值，因为<code>w</code>可以取地址。因此，和其他函数一样，<code>param</code>是一个左值，每次<code>logAndProcess()</code>调用内部函数<code>process()</code>时，都会调用它的左值重载版本。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Widget&amp;&amp; w)</span></span>;<br></code></pre></td></tr></table></figure><p>为了解决上述问题，就要用到<code>std::forward</code>，当<code>param</code>的实参是一个右值时，将<code>param</code>转换为右值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">const</span> Widget&amp; lvalArg)</span></span>;        <span class="hljs-comment">//处理左值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(Widget&amp;&amp; rvalArg)</span></span>;             <span class="hljs-comment">//处理右值</span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;                        <span class="hljs-comment">//用以转发param到process的模板</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">logAndProcess</span><span class="hljs-params">(T&amp;&amp; param)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> now =                              <span class="hljs-comment">//获取现在时间</span><br>        std::chrono::system_clock::<span class="hljs-built_in">now</span>();<br>    <br>    <span class="hljs-built_in">makeLogEntry</span>(<span class="hljs-string">&quot;Calling &#x27;process&#x27;&quot;</span>, now);<br>    <span class="hljs-built_in">process</span>(std::forward&lt;T&gt;(param));<br>&#125;<br><br>Widget w;<br><br><span class="hljs-built_in">logAndProcess</span>(w);               <span class="hljs-comment">//用左值调用</span><br><span class="hljs-built_in">logAndProcess</span>(std::<span class="hljs-built_in">move</span>(w));    <span class="hljs-comment">//用右值调用</span><br></code></pre></td></tr></table></figure><p>** 是否<code>T&amp;&amp;</code>就没有意义了？**</p><p>答案是否定的，<code>T&amp;&amp;</code>和<code>std::forward</code>是配合使用的，用于在模板函数中实现完美转发，自动适配左值&#x2F;右值。而在非末班函数中，<code>T&amp;&amp;</code>用于明确只接收右值。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/blizzard8204/p/17529803.html">性能优化利器 std::move&#x2F;forward 实现原理 </a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modern C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类型推导——auto与decltype</title>
    <link href="/2025/06/09/%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC%E2%80%94%E2%80%94auto%E4%B8%8Edecltype/"/>
    <url>/2025/06/09/%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC%E2%80%94%E2%80%94auto%E4%B8%8Edecltype/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>编码时必须明确变量的类型会降低编码的效率，并使代码变得冗长。因此，C++提供了auto和decltype这两个关键字来实现类型的推导。</p><h1 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>auto的基本语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> variable_name = expression;<br></code></pre></td></tr></table></figure><p>编译器可以根据expression的类型来自动推导出variable_name的类型。</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>auto比较常见的用法是推导迭代起来类型的推导：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">auto</span> a = x;          <span class="hljs-comment">// a 被推导为 int</span><br><br><span class="hljs-type">double</span> d = <span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">auto</span> b = d;          <span class="hljs-comment">// b 被推导为 double</span><br><br>std::vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">auto</span> it = vec.<span class="hljs-built_in">begin</span>(); <span class="hljs-comment">// it 被推导为 std::vector&lt;int&gt;::iterator</span><br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>auto必须初始化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> x; <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><ul><li>常量性和引用修饰符不自动保留</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> ci = <span class="hljs-number">42</span>;<br><span class="hljs-keyword">auto</span> a = ci;     <span class="hljs-comment">// a 是 int，不是 const int</span><br><br><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; r = x;<br><span class="hljs-keyword">auto</span> b = r;      <span class="hljs-comment">// b 是 int，不是 int&amp;</span><br></code></pre></td></tr></table></figure><p>如果想要保留修饰符，需要手动加上：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span>&amp; c = r; <span class="hljs-comment">// c 是 int&amp;</span><br><br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> d = ci; <span class="hljs-comment">// d 是 const int</span><br></code></pre></td></tr></table></figure><h2 id="C-14用法增强"><a href="#C-14用法增强" class="headerlink" title="C++14用法增强"></a>C++14用法增强</h2><ul><li>函数返回类型自动推导</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>泛型lambda函数传参</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> func = [](<span class="hljs-keyword">auto</span> x, <span class="hljs-keyword">auto</span> y) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 3</span><br><span class="hljs-built_in">func</span>(<span class="hljs-number">1.5</span>, <span class="hljs-number">2.5</span>); <span class="hljs-comment">// 4.0</span><br></code></pre></td></tr></table></figure><h2 id="C-20用法增强"><a href="#C-20用法增强" class="headerlink" title="C++20用法增强"></a>C++20用法增强</h2><ul><li>一般函数传参</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">auto</span> x, <span class="hljs-keyword">auto</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-built_in">add</span>(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>) &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h2 id="万能引用（转发引用）"><a href="#万能引用（转发引用）" class="headerlink" title="万能引用（转发引用）"></a>万能引用（转发引用）</h2><p>auto&amp;&amp;是C++11引入的一种万能引用，可以根据初始化表达式的值类型（左值&#x2F;右值）推导出不同的类型。给定如下代码，编译器会根据expr的值类型，推导出x的类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span>&amp;&amp; x = expr;<br></code></pre></td></tr></table></figure><p>通过使用auto&amp;&amp;，可以绑定左值也可以绑定右值的引用类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">42</span>;<br><span class="hljs-keyword">auto</span>&amp;&amp; x = a; <span class="hljs-comment">// 左值</span><br><span class="hljs-keyword">auto</span>&amp;&amp; y = <span class="hljs-number">123</span>; <span class="hljs-comment">// 右值</span><br></code></pre></td></tr></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>泛型代码的完美转发</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">wrapper</span><span class="hljs-params">(T&amp;&amp; arg)</span> </span>&#123;<br>    <span class="hljs-built_in">func</span>(std::forward&lt;T&gt;(arg)); <span class="hljs-comment">// 完美转发</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中 T&amp;&amp; 是模板参数的万能引用，auto&amp;&amp; 是其非模板变量形式，两者原理相似。</p><ul><li>范围for循环中高效使用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::vector&lt;std::string&gt; v = &#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp;&amp; s : v) &#123;<br>    <span class="hljs-comment">// s 是 std::string&amp;，防止复制，提高效率</span><br>    std::cout &lt;&lt; s &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你不确定容器中元素是左值还是右值、是否能被修改，auto&amp;&amp; 是一种保险、灵活又高效的选择。</p><h1 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h1><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><p>auto关键字只能对变量类型进行推导，为了解决这一缺陷，引入了decltype，其用法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">decltype</span>(表达式)<br></code></pre></td></tr></table></figure><h2 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">auto</span> y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">decltype</span>(x+y) z;<br></code></pre></td></tr></table></figure><h1 id="尾返回类型推导"><a href="#尾返回类型推导" class="headerlink" title="尾返回类型推导"></a>尾返回类型推导</h1><p>能否直接使用decltype推导函数的返回类型呢？就像下面的代码这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U&gt;</span><br><span class="hljs-function"><span class="hljs-title">decltype</span><span class="hljs-params">(x, y)</span> <span class="hljs-title">add</span><span class="hljs-params">(T x, U y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><p>答案是不能的，这样写无法通过编译。因为编译器在读到decltype(x+y)时，x和y还没有被定义。为此，C++11引入了尾返回类型，利用auto关键字返回类型后置：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add</span><span class="hljs-params">(T x, U y)</span> -&gt; <span class="hljs-title">decltype</span><span class="hljs-params">(x + y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>其中，auto是用于配合尾返回类型的占位符，-&gt;decltype(x + y)表示返回类型是表达式x + y的类型。这样写的好处是即使在模板定义中的T和U类型不同，也能正确推导出返回值的实际类型。例如int + double会返回double。</strong></p><p>C++14开始可以直接让普通函数具备返回值推导，因此下面的写法变得合法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> U&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">add2</span><span class="hljs-params">(T x, U y)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="decltype-auto"><a href="#decltype-auto" class="headerlink" title="decltype(auto)"></a>decltype(auto)</h1><p>decltype(auto)是C++14开始提供的用法，其主要用于对转发函数或封装的返回类型进行推导，而无需显示地指定。例如，对于下面的两个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">std::string <span class="hljs-title">lookup1</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">std::string&amp; <span class="hljs-title">lookup2</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>在C++中，封装实现的形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">std::string <span class="hljs-title">look_up_a_string_1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lookup1</span>();<br>&#125;<br><span class="hljs-function">std::string&amp; <span class="hljs-title">look_up_a_string_2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lookup2</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>而使用decltype(auto)则可以让编译器完成参数的转发，无需显示指定参数类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) <span class="hljs-title">look_up_a_string_1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lookup1</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">decltype</span>(<span class="hljs-keyword">auto</span>) <span class="hljs-title">look_up_a_string_2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lookup2</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://changkun.de/modern-cpp/zh-cn/02-usability/">Modern C++</a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Modern C++</tag>
      
      <tag>类型推导</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>const和constexpr详解</title>
    <link href="/2025/06/06/const%E5%92%8Cconstexpr%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/06/06/const%E5%92%8Cconstexpr%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>constexpr是c++11引入的关键字，其和const都是用来定义常量的，本文将详解两者的区别。</p><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>const一般用于修饰变量、引用、指针，标记它们为常量。然而，const并未区分编译期常量和运行期常量，只能保证变量运行时不被直接修改。</p><p>const变量，其值不能发生改变：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> x = <span class="hljs-number">100</span>; <span class="hljs-comment">// 常量</span><br>x = <span class="hljs-number">200</span>; <span class="hljs-comment">// 无法通过编译</span><br></code></pre></td></tr></table></figure><p>const引用，无法通过引用修改变量的值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; ref = x;<br><span class="hljs-comment">// ref = 20; // 无法通过编译</span><br>x = <span class="hljs-number">20</span>; <span class="hljs-comment">// 通过编译</span><br>cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl; <span class="hljs-comment">// 输出：ref = 20。虽然不能通过ref直接修改变量值，但可以通过x修改</span><br></code></pre></td></tr></table></figure><p>const引用，不能通过指针修改其所指向的值，但指针本身可以指向其他的地址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* ptr = &amp;a;<br><span class="hljs-comment">// *ptr = 5; // 错误，不能修改指针指向变量的值</span><br>ptr = &amp;b; <span class="hljs-comment">// 正确，可以修改指针指向</span><br></code></pre></td></tr></table></figure><p><strong>指向常量的指针的指向可以发生改变，若要限制指针本身为常量，需要调整const的位置：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span>* <span class="hljs-type">const</span> ptr = &amp;a; <span class="hljs-comment">// 指针地址不能改变，但是可以通过指针修改指向变量的值</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> ptr2 = &amp;a; <span class="hljs-comment">// 指向常量的常量指针，既不能通过指针修改值，也不能修改指针地址</span><br></code></pre></td></tr></table></figure><p>此外，const还能修饰成员函数，表明该函数不会修改对象的状态（成员变量）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClass</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">long</span> MAX_SIZE = <span class="hljs-number">256</span>;;<br>    <span class="hljs-type">int</span> m_value;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        m_value = <span class="hljs-number">100</span>; <span class="hljs-comment">// 错误，不能修改成员变量的值</span><br>        <span class="hljs-keyword">return</span> m_value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h1><p>const并没有区分编译期常量和运行期常量，我们用下面这个例子来说明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">rand</span>() % <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> x = <span class="hljs-built_in">getValue</span>();  <span class="hljs-comment">// x 是 const，但不是编译期常量</span><br>    <span class="hljs-type">int</span> arr[x];                <span class="hljs-comment">// 错误：x 不是编译期常量，不能做数组大小</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>编译期程序还没开始运行，只有字面值常量可以确定</p><p>运行期所有表达式都能求值</p></blockquote><p>constexpr即constant expression（常量表达式），进一步将修饰的内容限定为编译期常量。</p><p>constexpr修饰变量时，编译器能在编译时确定变量值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> x = <span class="hljs-number">5</span>; <span class="hljs-comment">// 编译期常量</span><br><span class="hljs-type">int</span> arr[x];          <span class="hljs-comment">// 数组大小合法</span><br></code></pre></td></tr></table></figure><p>constexpr修饰函数时，当其参数是constexpr时，函数会生成编译期常量。而使用非constexpr变量调用时，在运行时生成值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x * x;<br>&#125;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> val = <span class="hljs-built_in">square</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 编译期求值</span><br></code></pre></td></tr></table></figure><p>非constexpr值，则当做普通函数使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x * x;<br>&#125;<br><br><span class="hljs-type">int</span> x = <span class="hljs-built_in">rand</span>();<br><span class="hljs-type">int</span> y = <span class="hljs-built_in">square</span>(x); <span class="hljs-comment">// 合法，作为普通函数使用</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.luozhiyun.com/archives/756">C++ 中让人头晕的const &amp; constexpr</a><br><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/constexpr-cpp?view=msvc-170#constexpr_functions">constexpr (C++)</a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动构造函数与移动赋值函数</title>
    <link href="/2025/05/28/%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E7%A7%BB%E5%8A%A8%E8%B5%8B%E5%80%BC%E5%87%BD%E6%95%B0/"/>
    <url>/2025/05/28/%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E7%A7%BB%E5%8A%A8%E8%B5%8B%E5%80%BC%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>拷贝构造函数创建了源对象的副本，但有些时候我们并不需要进行拷贝，而只需将源对象的资源移动到目标对象，因此C++11提供了一种新的构造方法——移动构造函数。其可以减少不必要的复制，带来性能上的提升。移动赋值函数则与移动构造函数类似，其允许将源对象的资源转移到目标对象中，并更新目标对象的状态。</p><h1 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>移动的含义为：将源对象资源的控制权全部交给目标对象。<br>移动构造函数定义形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">class_name</span>(class_name &amp;&amp; )右值引用传参<br></code></pre></td></tr></table></figure><p>&amp;&amp;符号表示右值引用，下面介绍左值引用和右值引用的相关概念。</p><h2 id="左值引用和右值引用"><a href="#左值引用和右值引用" class="headerlink" title="左值引用和右值引用"></a>左值引用和右值引用</h2><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><p>首先介绍左值和右值的概念。左值可以取地址，位于等号左边；而右值无法取地址，位于等号右边。可以通过如下两个示例理解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><ul><li>a可以通过&amp;取地址，所以a是左值</li><li>5无法通过&amp;取地址，所以5是右值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>) &#123;<br>        a_ = a;<br>    &#125;<br> <br>    <span class="hljs-type">int</span> a_;<br>&#125;;<br> <br>A a = <span class="hljs-built_in">A</span>();<br></code></pre></td></tr></table></figure><ul><li>a可以通过&amp;取地址，所以a是左值</li><li>A()是个临时值，无法通过&amp;取地址，所以A()是个右值。</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用的本质是别名，可以通过引用修改变量的值，在传参时避免拷贝。</p><p>左值引用指的是能指向左值，不能指向右值的引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> &amp;ref_a = a; <span class="hljs-comment">// 左值引用指向左值，编译通过</span><br><span class="hljs-type">int</span> &amp;ref_a = <span class="hljs-number">5</span>; <span class="hljs-comment">// 左值引用指向了右值，会编译失败</span><br></code></pre></td></tr></table></figure><p>左值引用是变量的别名，而右值没有地址，无法被修改，所以左值引用无法指向右值。但const左值引用可以指向右值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;ref_a = <span class="hljs-number">5</span>; <span class="hljs-comment">// 编译通过</span><br></code></pre></td></tr></table></figure><p>const左值引用不会修改指向值，因此可以指向右值，这也是为什么要使用<code>const type_name &amp;</code>作为函数参数的原因之一。</p><p>右值引用的标志是<code>&amp;&amp;</code>，可以指向右值，不能指向左值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> &amp;&amp;ref_a_right = <span class="hljs-number">5</span>; <span class="hljs-comment">// 编译通过</span><br><br><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> &amp;&amp; ref_a_left = a; <span class="hljs-comment">//编译不通过，右值引用不可以指向左值</span><br><br>ref_a_right = <span class="hljs-number">6</span>; <span class="hljs-comment">// 右值引用的用途，可以修改右值</span><br></code></pre></td></tr></table></figure><h3 id="右值引用有办法指向左值吗？"><a href="#右值引用有办法指向左值吗？" class="headerlink" title="右值引用有办法指向左值吗？"></a>右值引用有办法指向左值吗？</h3><p>可以通过<code>std::move</code>实现右值引用指向左值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>; <span class="hljs-comment">// a是一个左值</span><br><span class="hljs-type">int</span> &amp;ref_a_left = a;<br><span class="hljs-type">int</span> &amp;&amp;ref_a_right = std::<span class="hljs-built_in">move</span>(a); <span class="hljs-comment">// 通过std::move将左值转换为右值，可以被右值引用指向</span><br><br>cout &lt;&lt; a;<br></code></pre></td></tr></table></figure><p><code>std::move</code>并不会移动什么，只是将左值强制转化为右值，让右值引用可以指向左值。而变量a依然存在，因此并不会有性能提升。</p><h2 id="移动构造函数详解"><a href="#移动构造函数详解" class="headerlink" title="移动构造函数详解"></a>移动构造函数详解</h2><p>下面我们用一个示例来详细解释移动构造函数做了什么：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span>* data;<br><br>    <span class="hljs-comment">// 移动构造函数</span><br>    <span class="hljs-built_in">MyClass</span>(MyClass&amp;&amp; other) <span class="hljs-keyword">noexcept</span> &#123;<br>        data = other.data;      <span class="hljs-comment">// 接管资源</span><br>        other.data = <span class="hljs-literal">nullptr</span>;   <span class="hljs-comment">// 置空原对象资源，防止析构时释放</span><br>    &#125;<br><br>    ~<span class="hljs-built_in">MyClass</span>() &#123;<br>        <span class="hljs-keyword">delete</span> data;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><code>other</code>是一个右值引用对象</li><li><code>data = other.data</code>让目标对象获取<code>other</code>的资源，不需要<code>new</code>新内存</li><li><code>other.data = nullptr</code>，将源对象指向资源的指针置空，防止原对象<code>other</code>销毁时释放资源<br>从上述示例中，我们可以得出移动构造函数可以实现<strong>不用复制资源，直接转移资源的所有权</strong>。这样一来避免了高代价的深拷贝，二来做到了零开销的资源转移。</li></ul><p><strong>为什么不用普通的引用而是使用右值引用？</strong><br>如果使用普通引用<code>&amp;</code>，程序无法区分传进来的对象是否还要继续使用。而右值引用是专门绑定右值对象的，可以放心的进行转移资源。</p><h1 id="移动赋值函数"><a href="#移动赋值函数" class="headerlink" title="移动赋值函数"></a>移动赋值函数</h1><p>还是用一个例子来理解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span>* x;<br><br>    <span class="hljs-built_in">Item</span>()=<span class="hljs-keyword">default</span>;<br>    <span class="hljs-built_in">Item</span>(<span class="hljs-type">int</span> val)&#123; x = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(val);&#125;;<br>    <span class="hljs-built_in">Item</span>(<span class="hljs-type">const</span> Item&amp; item)&#123;<br>        x = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*item.x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;copy\n&quot;</span>);<br>    &#125;;<br>    <span class="hljs-built_in">Item</span>(Item&amp;&amp; item)&#123;<br>        x = item.x;<br>        item.x = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;move\n&quot;</span>);<br>    &#125;;<br><br>    Item&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Item&amp; item)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;item)&#123;<br>            <span class="hljs-keyword">this</span>-&gt;x = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*item.x);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;copy=\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动赋值函数</span><br>    Item&amp; <span class="hljs-keyword">operator</span>=(Item&amp;&amp; item)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;item)&#123;<br>            <span class="hljs-keyword">this</span>-&gt;x = item.x;<br>            item.x = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;move=\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Item</span>()&#123;<br>        <span class="hljs-keyword">delete</span> x;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>首先，观察移动赋值函数做了什么：</p><ul><li>判断当前对象和传入的右值对象是否是同一个，如果不是同一个：<ul><li>将当前对象的资源指针指向传入对象的资源，并将传入对象的资源指针置空</li></ul></li><li>返回当前对象<br>可以看出移动赋值函数和移动构造函数的目的一致，都是将传入对象的资源转移到目标对象。但移动赋值函数会多做一步判断，如果传入对象不是当前对象才进行移动。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/david-china/p/17198052.html">C++移动构造函数</a><br><a href="https://cloud.tencent.com/developer/article/2475349">《C++中的移动构造函数与移动赋值运算符：高效编程的利器》</a><br><a href="https://zhuanlan.zhihu.com/p/335994370">一文读懂C++右值引用和std::move</a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>const关键字</title>
    <link href="/2025/05/26/const%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2025/05/26/const%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>const</code>是C++中用于指示变量值不可变（常量）的关键字，被<code>const</code>修饰的变量在编译时会被视为只读，尝试修改其值会导致编译错误。通过使用<code>const</code>可以提高代码的安全性与可读性。</p><h1 id="const用于变量声明"><a href="#const用于变量声明" class="headerlink" title="const用于变量声明"></a><code>const</code>用于变量声明</h1><p><code>const</code>关键字通常放在变量类型前面，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>不过放在变量类型后面也是可以的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> <span class="hljs-type">const</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>可以使用变量初始化常量，也可以将常量赋值给变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> i2 = i1;<br><span class="hljs-type">int</span> i3 = i2;<br></code></pre></td></tr></table></figure><p><code>const</code>修饰的变量必须初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> i4; <span class="hljs-comment">// 错误，const修饰的变量必须初始化</span><br></code></pre></td></tr></table></figure><h1 id="编译器对const修饰变量的处理"><a href="#编译器对const修饰变量的处理" class="headerlink" title="编译器对const修饰变量的处理"></a>编译器对<code>const</code>修饰变量的处理</h1><p>编译器在编译过程中会将用到<code>const</code>修饰变量的地方替换成对应的值，因此编译器必须知道变量的初始值。但是编译阶段各文件是独立编译的，因此每个文件都必须包含<code>const</code>修饰变量的定义。为了支持这一用法，并避免重复定义，<strong>默认情况下<code>const</code>对象被设定为仅在文件内有效</strong>。当多个文件中出现了同名的<code>const</code>变量时，等同于在不同文件中分别定义了独立的变量。</p><p>下面用一个例子说明上述内容：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// global.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DAY08_CONST_GLOBAL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DAY08_CONST_GLOBAL_H</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> bufSize = <span class="hljs-number">100</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//DAY08_CONST_GLOBAL_H</span></span><br><br><span class="hljs-comment">// global.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><br><span class="hljs-comment">// main.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>编译上述程序，程序可以编译通过，说明<code>global.cpp</code>和<code>main.cpp</code>中的<code>bufSize</code>虽然同名，但却是不同的变量。</p><p>如果不想定义不同的变量，则可以在<code>global.h</code>中用<code>extern</code>声明<code>bufSize</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DAY08_CONST_GLOBAL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DAY08_CONST_GLOBAL_H</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> bufSize = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> bufSize2;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//DAY08_CONST_GLOBAL_H</span></span><br><br><span class="hljs-comment">//打印bufSize地址和bufSize2地址</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title">PrintBufAddress</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>在<code>global.cpp</code>中定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> bufSize2 = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintBufAddress</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;global.cpp buf address: &quot;</span> &lt;&lt; &amp;bufSize &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;global.cpp buf2 address: &quot;</span> &lt;&lt; &amp;bufSize2 &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>main.cpp</code>中调用<code>PrintBugAddress()</code>函数，并在<code>main.cpp</code>中打印两个变量的地址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global.h&quot;</span></span><br><span class="hljs-built_in">PrintBufAddress</span>();<br><span class="hljs-comment">//输出bufSize地址</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;main.cpp buf address is &quot;</span> &lt;&lt; &amp;bufSize &lt;&lt; std::endl;<br><span class="hljs-comment">//输出bufSize2地址</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;main.cpp buf2 address is &quot;</span> &lt;&lt; &amp;bufSize2 &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">global.cpp buf address: 0x7ff67a984040<br>global.cpp buf2 address: 0x7ff67a984044<br>main.cpp buf address is 0x7ff67a984000<br>main.cpp buf2 address is 0x7ff67a984044<br></code></pre></td></tr></table></figure><p>可以看到<code>global.cpp</code>和<code>main.cpp</code>中的<code>bufSize</code>地址是不同的，而<code>bufSize2</code>是相同的。 </p><h1 id="const与引用"><a href="#const与引用" class="headerlink" title="const与引用"></a><code>const</code>与引用</h1><p>可以把引用绑定到<code>const</code>对象上，称之为常量的引用。与普通引用不同，常量的引用不能被用作修改它所绑定的对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> ci = <span class="hljs-number">1024</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;r1 = ci;<br></code></pre></td></tr></table></figure><p>不能修改常量引用的值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">r1 = <span class="hljs-number">2048</span>; <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><p><strong>不能用非常量引用指向一个常量对象</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> &amp;r2 = ci; <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><p>允许用<code>const</code>修饰非<code>const</code>变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i5 = <span class="hljs-number">1024</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;r5 = i5;<br><br>i5 = <span class="hljs-number">2048</span>; <span class="hljs-comment">// 正确</span><br>r5 = <span class="hljs-number">2047</span>; <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><p><strong>注意：此时可以使用变量名<code>i5</code>修改<code>i5</code>的值，但不能用别名<code>r5</code>进行修改。</strong><br>常量引用可以绑定字面值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;r6 = <span class="hljs-number">1024</span>;<br></code></pre></td></tr></table></figure><p><strong><code>const</code>修饰的引用可以做隐式转换：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span> dval = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;ri = dval;<br></code></pre></td></tr></table></figure><p>上述代码可以编译通过，将double类型的<code>dval</code>隐式转换为<code>int</code>类型。</p><h1 id="const与指针"><a href="#const与指针" class="headerlink" title="const与指针"></a><code>const</code>与指针</h1><h2 id="指向常量的指针"><a href="#指向常量的指针" class="headerlink" title="指向常量的指针"></a>指向常量的指针</h2><p>可以让指针指向常量，此时该指针不能用于修改其所指对象的值.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">double</span> *ptr = &amp;PI; <span class="hljs-comment">// 错误，普通指针不能指向常量</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> *cptr = &amp;PI;<br>*cptr = <span class="hljs-number">3.14</span>; <span class="hljs-comment">// 错误</span><br></code></pre></td></tr></table></figure><p><strong>允许指向非常量的指针指向非常量</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i10 = <span class="hljs-number">2048</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *cptr2 = i10;<br></code></pre></td></tr></table></figure><h2 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a><code>const</code>指针</h2><p>允许将指针本身定义为常量，称之为常量指针。其一旦初始化，就不能再进行修改了，即不能指向其他地址。</p><p>把<code>*</code>放到<code>const</code>前用于表示指针是一个常量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> errNumb = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> *<span class="hljs-type">const</span> curErr = &amp;errNumb; <span class="hljs-comment">// curErr是一个常量指针</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> pi2 = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> *<span class="hljs-type">const</span> pip = &amp;pi2; <span class="hljs-comment">// pip是一个指向常量对象的常量指针</span><br></code></pre></td></tr></table></figure><p><strong>指针本身是一个常量，并不意味着不能通过指针修改其指向的对象的值，能否修改由对象本身的类型决定。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">*pip = <span class="hljs-number">2.72</span>; <span class="hljs-comment">//错误，pip是一个指向常量的指针</span><br>*curErr = <span class="hljs-number">1024</span>; <span class="hljs-comment">//可以修改常量指针指向的内容</span><br></code></pre></td></tr></table></figure><h1 id="顶层const和底层const"><a href="#顶层const和底层const" class="headerlink" title="顶层const和底层const"></a>顶层<code>const</code>和底层<code>const</code></h1><blockquote><p>用名词顶层<code>const</code>表示指针本身是常量，用名词底层<code>const</code>表示指针指向的对象是常量——《C++ Primer》<br>上述定义比较难以理解，可以按照下面两点来辨析<code>const</code>：</p></blockquote><ul><li>被修饰的变量本身无法改变的<code>const</code>是顶层<code>const</code></li><li>通过指针或引用等间接途径来限制目标内容不可变的<code>const</code>是底层<code>const</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> *<span class="hljs-type">const</span> p1 = &amp;i;       <span class="hljs-comment">// 不能改变p1的值，这是一个顶层const</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ci = <span class="hljs-number">42</span>;        <span class="hljs-comment">// 不能改变ci的值，这是一个顶层const</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p2 = &amp;ci;      <span class="hljs-comment">// 允许改变p2的值，这是一个底层const</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *<span class="hljs-type">const</span> p3 = p2; <span class="hljs-comment">// 靠右的const是顶层const，靠左的const是底层const</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;r = ci;        <span class="hljs-comment">// 用于声明引用的const都是底层const</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/TeFuirnever/article/details/103011514">【C++100问】深入理解理解顶层const和底层const</a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>extern关键字</title>
    <link href="/2025/05/24/extern%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2025/05/24/extern%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>extern是一个修饰变量或函数的关键字，用于说明修饰的符号具有外部链接性。通过使用extern关键字，可以引用其他源文件中的变量和函数，实现模块化编程和代码重用。</p><h1 id="extern的用法"><a href="#extern的用法" class="headerlink" title="extern的用法"></a>extern的用法</h1><h2 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h2><p>一般情况下，在一个源文件中定义的变量和函数只能被源文件中的函数调用，但是C++程序会有许多源文件，为了在本源文件中使用其他文件的变量，C++提供了extern关键字。在使用其他源文件中的全局变量时，只需要在本源文件中使用extern关键字来声明这个变量即可。示例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在test1.cpp源文件中定义全局变量a、b、c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test1.h&quot;</span></span><br><br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br><span class="hljs-comment">// 在test1.h中声明变量a、b、c</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> a, b;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> c;<br><br><span class="hljs-comment">//在test2.cpp源文件中要使用test1.cpp源文件中的全局变量a、b、c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;test1.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译器不会为<code>test2.cpp</code>源文件中的全局变量a、b、c分配内存空间，而是直接使用<code>test1.cpp</code>中的全局变量a、b、c。如果在<code>test2.cpp</code>中修改a、b、c的值，<code>test1.cpp</code>中变量的值也会发生改变。</p><blockquote><p>在<code>test1.cpp</code>中&#96;#include “test1.h”是为了防止声明与定义不一致，让编译器自动检查声明和定义的一致性。</p></blockquote><h2 id="修饰函数"><a href="#修饰函数" class="headerlink" title="修饰函数"></a>修饰函数</h2><p>与修饰变量类似，extern修饰函数，可以用于在一个文件中引用另一个文件中定义的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 文件1: main.cpp</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title">print_message</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 声明一个外部函数</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">print_message</span>();  <span class="hljs-comment">// 调用外部函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 文件2: print.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_message</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// 定义一个函数</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们在 print.cpp 文件中定义了一个函数 print_message，然后在 main.cpp 文件中通过 extern 关键字声明了同名的外部函数 print_message，从而使其可以在 main.cpp 文件中调用。</p><h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><p>extern和”C”配合使用，可以解决C++代码和C代码之间的链接问题。</p><p>由于C++支持函数重载，所以在编译阶段，编译器会对函数名进行改编（mangling），以区分具有相同名字但参数类型不同的函数。然而，C 语言不支持函数重载，也就没有这个改编过程。因此，如果我们想在 C++ 代码中调用 C 代码，或者在 C 代码中调用 C++ 代码，就需要用到 extern “C”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 文件1: main.cpp (C++代码)</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_message</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 使用 extern &quot;C&quot; 声明一个外部函数</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">print_message</span>();  <span class="hljs-comment">// 调用外部函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 文件2: print.c (C代码)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_message</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// 定义一个函数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子和前一个例子类似，但有一个重要的区别：print.c 是用 C 语言编写的，而 main.cpp 是用 C++ 编写的。因此，我们需要用 extern “C” 来声明 print_message 函数，以确保 C++ 编译器能正确链接到 C 语言编写的 print_message 函数。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.51cto.com/article/768503.html">深入理解 C++ 中的 extern 关键字</a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么需要头文件？</title>
    <link href="/2025/05/23/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%A4%B4%E6%96%87%E4%BB%B6%EF%BC%9F/"/>
    <url>/2025/05/23/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%A4%B4%E6%96%87%E4%BB%B6%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C++程序中使用头文件并不是强制的，但其是一种非常重要且实用的编程组织方式，目的是提高可维护性、可重用性和编译效率。</p><h1 id="头文件和源文件的定义"><a href="#头文件和源文件的定义" class="headerlink" title="头文件和源文件的定义"></a>头文件和源文件的定义</h1><ul><li>头文件（<code>.h</code>或<code>.hpp</code>）：主要用于声明类、函数、常量、宏等。头文件不会生成目标代码（<code>.o</code>或<code>obj</code>文件）。</li><li>源文件（<code>.cpp</code>）：用于实现函数和类中的具体功能，其会被编译器编译成目标文件。</li></ul><h1 id="为什么需要头文件"><a href="#为什么需要头文件" class="headerlink" title="为什么需要头文件"></a>为什么需要头文件</h1><p><code>.cpp</code>文件在编译时不需要利用其他文件，其独立编译成目标文件。之后再通过一次链接，实现对其他文件中内容的调用。例如对文件<code>a.cpp</code>和文件<code>b.cpp</code>，<code>b.cpp</code>中使用到了<code>a.cpp</code>的<code>void a()</code>函数，在编译时<code>b.cpp</code>不需要事先知道<code>a.cpp</code>中<code>void a()</code>函数的定义，两个文件分别进行编译，编译成目标文件之后再链接，得到可执行文件。这是因为C++在编译阶段会为<code>.cpp</code>文件生成符号表，利用其在别的文件中查找所需的内容。因此，在<code>b.cpp</code>中声明<code>void a()</code>函数，编译时将其存放到<code>b.cpp</code> 的符号表（Symbol Table）中，就可以实现<code>a.cpp</code>中<code>void a()</code>函数的调用。</p><p>通过上述编译模式，我们只需要在一个文件中定义所需的函数和类，在其他文件中声明对应的函数和类即可。但是这样需要记住所有函数和类的名字，且代码冗余。</p><p>头文件就是用来解决上述问题的，其不会被编译。我们将所有的函数声明全部放到头文件中，当一个 <code>.cpp</code>文件需要它们时，就可以通过宏命令<code>#include</code>将它们的内容合并到<code>.cpp</code>文件中，当<code>.cpp</code>文件被编译时，这些被包含进去的头文件就可以提供函数的声明。</p><p><strong><code>#include</code>是一个C语言的宏命令，其在预编译阶段将其后所写的文件名完整替换为这个文件中的内容。</strong></p><h1 id="头文件中应该写什么？"><a href="#头文件中应该写什么？" class="headerlink" title="头文件中应该写什么？"></a>头文件中应该写什么？</h1><p>头文件可能被多个<code>.cpp</code>文件使用，而定义只能有一次，所以头文件中只能包含变量、函数或类的声明，而不能存放它们的定义。该规则有以下三个例外：</p><ol><li><p>头文件中可以写<code>const</code>对象的定义<br><code>const</code>默认具有内部链接性，因此不会暴露给链接器。每个<code>.cpp</code>文件都会创建一份<code>const</code>对象的副本，互不影响，因此不会产生冲突。<br>同理，<code>static</code>对象的定义也可以放进头文件。</p><blockquote><p>链接性：指的是一个名字（变量、函数等）在多个源文件中的可见性。</p><p>无链接性：名字只在当前作用域中有效（如局部变量）</p><p>内部链接性：名字只在当前翻译单元（<code>.cpp</code>文件）中可见</p><p>外部链接性：名字可以被其他<code>.cpp</code>文件引用和共享</p></blockquote></li><li><p>头文件中可以写内联（inline）函数的定义<br>C++规定内联函数可以在程序中多次定义，编译器会在每个使用点内联替换函数体，或者产生一个局部副本，因此链接器不会因为重复定义报错。</p></li><li><p>头文件中可以写类的定义<br>类定义需要被多个源文件看到，因此可以将其写在头文件中，但函数体的实现通过写在<code>.cpp</code>文件中。</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// MyClass.h（头文件） —— 声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> number;<br>&#125;;<br><br><span class="hljs-comment">// MyClass.cpp（源文件） —— 实现</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MyClass.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br>MyClass::<span class="hljs-built_in">MyClass</span>() : <span class="hljs-built_in">number</span>(<span class="hljs-number">0</span>) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyClass::sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello from MyClass!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>此外，类内定义的成员函数也可以写在头文件中，因此类内定的成员函数默认是内联的。而模版类必须放到头文件中定义函数体，因为模板是在编译阶段实例化的，编译器在看到模板使用时，必须能看到完整的定义（包括函数体）才能生成代码。</strong></p><h1 id="头文件中的保护措施"><a href="#头文件中的保护措施" class="headerlink" title="头文件中的保护措施"></a>头文件中的保护措施</h1><p>上述三个例外情况导致头文件可能存在定义，虽然这些定义可以在多个源文件中出现，但在一个源文件中只能出现一次。如果<code>a.h</code>中定义了类A，<code>b.h</code>中定义了类B，且类B的定义依赖了类A，则<code>b.h</code>中包含了<code>a.h</code>。一个源文件，如果同时用到了类A和类B，将<code>a.h</code>和<code>b.h</code>包含进来，则类A会被重复定义，导致程序报错，无法通过编译。</p><p>解决办法就是通过<code>#pragma once</code>或<code>#ifndef...#define...#endif</code>条件编译使得编译器可以根据头文件名是否被定义，再决定要不要继续编译该头文件后续的内容。</p><h1 id="pragma-once和-ifndef-define-endif的区别"><a href="#pragma-once和-ifndef-define-endif的区别" class="headerlink" title="#pragma once和#ifndef...#define...#endif的区别"></a><code>#pragma once</code>和<code>#ifndef...#define...#endif</code>的区别</h1><h2 id="pragma-once"><a href="#pragma-once" class="headerlink" title="#pragma once"></a><code>#pragma once</code></h2><p><code>#pragma once</code>是非标准但广泛支持的预处理指令，用于指示编译器文件头在单个文件的编译过程中只能出现一次。</p><p>优点：不需要生成唯一的宏名，简单。</p><p>缺点：不是C++标准的一部分，在某些旧的或特定的编译器中可能不被支持。</p><h2 id="宏定义-ifndef-define-endif"><a href="#宏定义-ifndef-define-endif" class="headerlink" title="宏定义#ifndef...#define...#endif"></a>宏定义<code>#ifndef...#define...#endif</code></h2><p><code>#ifndef...#define...#endif</code>通过检查特定的宏是否已被定义来避免重复定义问题。</p><p>优点：是C++标准的一部分，在所有C+编译器中都是可用的。</p><p>缺点：需要为每个头文件生成一个唯一的宏名。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.runoob.com/w3cnote/cpp-header.html">理解C++中的头文件和源文件的作用</a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++程序编译过程</title>
    <link href="/2025/05/22/C-%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/05/22/C-%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C++程序编译过程主要分为以下四个阶段：</p><ol><li>预处理（Preprocessing）：在编译器真正编译源代码之前对代码进行处理，这个阶段由预处理器完成，主要处理以<code>#</code>开头的预处理指令。</li><li>编译（Compilation）：将预处理后的C++源代码转换成汇编代码。</li><li>汇编（Assemble）：将编译器生成的汇编代码转换为目标机器能够理解的机器代码。</li><li>链接（Linking）：将多个目标文件和库文件（如标准库、第三方库）合并成一个可执行文件。</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>首先介绍示例代码，总共包含三个文件<code>main.cpp</code>、<code>my_math.h</code>和<code>my_math.cpp</code>。</p><p><code>main.cpp</code>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_math.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> s = demo::<span class="hljs-built_in">sum</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;s = &quot;</span> &lt;&lt; s &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>my_math.h</code>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MY_MATH_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MY_MATH_H</span><br><br><span class="hljs-keyword">namespace</span> demo &#123;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p><code>my_math.cpp</code>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_math.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> demo &#123;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>预处理阶段主要处理以<code>#</code>开头的代码行，例如对宏做展开、对include的文件做展开、条件编译选项判断、清理注释等。预处理后的文件以<code>.i</code>和<code>.ii</code>结尾。</p><p>在Visual Studio中可以在项目的属性中将下图两个字段设置为是，以生成预处理文件：<br><img src="/./images/C++%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/%E7%94%9F%E6%88%90%E9%A2%84%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE.png" alt="生成预处理文件设置"><br><strong>注意：设置了预处理到文件之后将不在生成可执行文件，Linker将无法找到要链接的可编译目标obj文件，要想生成可执行文件需要将预处理到文件重新设置为否。</strong></p><p>设置完毕后，生成解决方案，即可在项目文件夹（项目文件夹&#x2F;项目文件名&#x2F;x64&#x2F;Debug）中找到对应的.i文件，下图展示了<code>main.i</code>文件。从图中可以看出简单的代码经过预处理后展开成了几万行的代码。<br><img src="/./images/C++%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/main%E9%A2%84%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6.png" alt="main预处理文件"></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译器（如g++、clang++等）使用预处理的输出结果作为输入，生成与平台相关的汇编代码，文件以<code>.s</code>或<code>.asm</code>结尾。</p><p>在Visual Studio中，右键项目，进入属性。在左侧配置属性，选择C&#x2F;C++中的输出文件。接着找到选项汇编程序输出，将其更改为带源代码的程序集，即可在<code>项目文件夹/项目文件名/x64/Debug</code>文件夹下得到汇编文件。<br><img src="/./images/C++%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/%E8%BE%93%E5%87%BA%E6%B1%87%E7%BC%96%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE.png" alt="输出汇编文件设置"><br><img src="/./images/C++%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/main%E6%B1%87%E7%BC%96%E6%96%87%E4%BB%B6.png" alt="main汇编文件"></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编将编译阶段产生的汇编代码转换为目标代码，通常以<code>.o</code>、<code>.obj</code>或<code>.out</code>结尾。</p><p>C++程序在生成解决方案时会自动生成目标代码，代码位于<code>项目文件夹/项目文件名/x64/Debug</code>文件夹下。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接阶段将目标文件和库文件合并成一个可执行文件或库文件。在链接的过程中，链接器会解决外部符号引用（即函数和变量的调用），并将它们链接到正确的地址。该阶段的输出为以<code>.exe</code>结尾的文件。</p><h1 id="理解类模板成员函数生成的时机"><a href="#理解类模板成员函数生成的时机" class="headerlink" title="理解类模板成员函数生成的时机"></a>理解类模板成员函数生成的时机</h1><p>模板本质上是编译期的代码生成机制。</p><p>接下来给出一个模版类的范例，以更好地理解类模版成员函数的生成机制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson1</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Person1 show&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person2</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson2</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Person2 show&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    T obj;<br><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123;<br>        obj.<span class="hljs-built_in">showPerson1</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span> </span>&#123;<br>        obj.<span class="hljs-built_in">showPerson2</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass&lt;Person&gt; m;<br><br>    m.<span class="hljs-built_in">fun1</span>(); <span class="hljs-comment">// 编译成功</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass&lt;Person&gt; m;<br><br>    m.<span class="hljs-built_in">fun1</span>();<br><br>    m.<span class="hljs-built_in">fun2</span>(); <span class="hljs-comment">// 编译失败</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当我们调用<code>test01()</code>时，编译器在编译阶段发现用<code>MyClass&lt;Person&gt;</code>类进行了实例化，并调用了<code>showPerson1()</code>函数，会为<code>Person</code>类型生成<code>MyClass&lt;Person&gt;::showPerson1()</code>的代码。而<code>showPerson2()</code>没有被调用，因此编译器不会为其生成代码，也不会参与后续的汇编和链接阶段。</p><p><strong>这样设计的好处：可以避免不必要的代码生成，节省资源。</strong></p><p>以<code>MyClass&lt;T&gt;</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/Applicaton/article/details/127437265?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~Ctr-3-127437265-blog-145368757.235%5Ev43%5Epc_blog_bottom_relevance_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~Ctr-3-127437265-blog-145368757.235%5Ev43%5Epc_blog_bottom_relevance_base3&utm_relevant_index=3">visual Studio 如何查看预处理后生成的代码C&#x2F;C++</a><br><a href="https://zhuanlan.zhihu.com/p/549996872">C&#x2F;C++程序编译过程为什么要分为四个步骤？</a></p>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板</title>
    <link href="/2025/05/21/%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/05/21/%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>模板（Template）是支持泛型编程的核心机制，用于编写与类型无关的代码。其可以分为以下两类：</p><ul><li>函数模板</li><li>类模板<br>模板使得在编写逻辑相同但类型不同的函数或类时，可以只写一份代码，由编译器在使用时根据具体类型自动生成对应的代码。</li></ul><h1 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h1><p>函数模板用于编写通用函数，其函数返回值和形参类型可以不事先指定，用虚拟的数据类型表示。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">add</span><span class="hljs-params">(T a, T b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，template是创建模板的声明；typename表示其后面的符号是一种数据类型，可以用class代替；T表示虚拟数据类型，名称可以更改，一般使用大写字母表示。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>函数模板有两种使用方式：</p><ul><li>自动类型推导（方式一）</li><li>显式指定类型（方式二）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span> </span>&#123;<br>    T temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-comment">// 方式一：自动类型推导</span><br>    <span class="hljs-built_in">mySwap</span>(a, b);<br><br>    <span class="hljs-comment">// 方式二：显式指定类型</span><br>    <span class="hljs-built_in">mySwap</span>&lt;<span class="hljs-type">int</span>&gt;(a, b);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板函数与普通函数的区别"><a href="#模板函数与普通函数的区别" class="headerlink" title="模板函数与普通函数的区别"></a>模板函数与普通函数的区别</h2><ul><li>能否发生隐式类型转换<br>普通函数调用时可以发生隐式类型转换。函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换，显式指定类型可以发生隐式类型转换。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap01</span><span class="hljs-params">(T&amp; a, T&amp; b)</span> </span>&#123;<br>    T temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap02</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br>    <span class="hljs-built_in">mySwap01</span>(a, c); <span class="hljs-comment">// 编译类型错误，int和char不一致，T无法自动推导，无法将char进行隐式转换，转换为整型</span><br><br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br>    <span class="hljs-built_in">mySwap</span>&lt;<span class="hljs-type">int</span>&gt;(a, c) <span class="hljs-comment">// 显式指定类型时可以进行隐式转换，将char转为整型</span><br><br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br>    <span class="hljs-built_in">mySwap02</span>(a, c); <span class="hljs-comment">// 普通函数可以进行隐式转换</span><br><br>    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>普通函数优先于模板函数<br>如果模板函数和普通函数都可以实现，优先调用普通函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;int: &quot;</span> &lt;&lt; a &lt;&lt; &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myPrint</span><span class="hljs-params">(T a)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;template: &quot;</span> &lt;&lt; a &lt;&lt; endl; <br>&#125;<br><br><span class="hljs-comment">// 输出为“int: 10”</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">myPrint</span>(a)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>模板定义必须与声明在同一个文件中<br>模板函数在编译时才进行实例化，定义通常应写在头文件中，否则链接时会出现未定义引用错误，通常将其后缀改为“.hpp”。普通函数定义可以与头文件分开。</li></ul><h2 id="为特殊类型提供具体化模板"><a href="#为特殊类型提供具体化模板" class="headerlink" title="为特殊类型提供具体化模板"></a>为特殊类型提供具体化模板</h2><p>模板的虚拟数据类型并不是万能的，有时需要提供具体化模板以解决特殊类型的函数调用问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age) &#123;<br>        <span class="hljs-keyword">this</span>.m_Name = name;<br>        <span class="hljs-keyword">this</span>.m_age = age;<br>    &#125;<br><br>    string m_Name;<br>    <span class="hljs-type">int</span> m_Age;<br>&#125;<br><br><span class="hljs-comment">// 普通函数模板</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(T&amp; a, T&amp; b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a == b) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体化模板:优先于常规模板</span><br><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">myCompare</span><span class="hljs-params">(Person&amp; p1, Person&amp; p2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p<span class="hljs-number">1.</span>m_Name == p<span class="hljs-number">2.</span>m_Name &amp;&amp; p<span class="hljs-number">1.</span>m_Age == p<span class="hljs-number">2.</span>m_Age) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br><br>    <span class="hljs-type">bool</span> result = <span class="hljs-built_in">myCompare</span>(p1, p2);<br><br>    <span class="hljs-keyword">if</span> (result) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;p1 == p2&quot;</span> &lt;&lt; endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;p1 ！= p2&quot;</span> &lt;&lt; endl; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h1><p>类模板允许我们定义与类型无关的类。通过类模板，我们可以编写一个逻辑统一、类型灵活的类结构，让编译器在使用时根据实际类型自动生成具体类。</p><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    T data;<br>    <span class="hljs-built_in">MyClass</span>(T val) : <span class="hljs-built_in">data</span>(val) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; data &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中，template用于声明这是一个模板；typename表示后面的符号是一种数据类型，可以用class代替；T是虚拟类的名字，可以更改。<br><strong>类模板使用时必须指定类型，如：MyClass<int>、MyClass<string></strong></p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">MyClass&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">obj1</span><span class="hljs-params">(<span class="hljs-number">42</span>)</span></span>;<br>    obj<span class="hljs-number">1.</span><span class="hljs-built_in">show</span>(); <span class="hljs-comment">// 输出：42</span><br><br>    <span class="hljs-function">MyClass&lt;std::string&gt; <span class="hljs-title">obj2</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello&quot;</span>)</span></span>;<br>    obj<span class="hljs-number">2.</span><span class="hljs-built_in">show</span>(); <span class="hljs-comment">// 输出：Hello</span><br>&#125;<br></code></pre></td></tr></table></figure><p>模板类在实例化时才会生成对应类型的代码。</p><h2 id="类模板和函数模板的区别："><a href="#类模板和函数模板的区别：" class="headerlink" title="类模板和函数模板的区别："></a>类模板和函数模板的区别：</h2><ul><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以用默认参数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span> = <span class="hljs-type">int</span>&gt;<br><span class="hljs-keyword">class</span> Person &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(NameType name, AgeType age) &#123;<br>        <span class="hljs-keyword">this</span>.mName = name;<br>        <span class="hljs-keyword">this</span>.mAge = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>.mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>.mAge &lt;&lt; endl;<br>    &#125;<br><br>    NameType mName;<br>    AgeType mAge;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Person p(&quot;孙悟空&quot;, 1000); // 错误，类模板使用时，不可以自动类型推导</span><br>    <span class="hljs-function">Person&lt;String, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>)</span></span>; <span class="hljs-comment">// 必须用显式指定类型的方式使用类模板</span><br>    p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Person&lt;String&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">999</span>)</span></span>;<br>    p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类模板成员函数创建时机"><a href="#类模板成员函数创建时机" class="headerlink" title="类模板成员函数创建时机"></a>类模板成员函数创建时机</h2><p>普通成员函数一开始就会创建，类模板的成员函数在调用时才会创建。</p><p>在下列示例中，test01()函数中的实例obj只有一个方法showPerson1()，并没有showPerson2()方法，但可以编译成功，说明类模板成员函数只有在调用的时候才会创建。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person1</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson1</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Person1 show&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person2</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson2</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Person2 show&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    T obj;<br><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">()</span> </span>&#123;<br>        obj.<span class="hljs-built_in">showPerson1</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun2</span><span class="hljs-params">()</span> </span>&#123;<br>        obj.<span class="hljs-built_in">showPerson2</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass&lt;Person&gt; m;<br><br>    m.<span class="hljs-built_in">fun1</span>(); <span class="hljs-comment">// 编译成功</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass&lt;Person&gt; m;<br><br>    m.<span class="hljs-built_in">fun1</span>();<br><br>    m.<span class="hljs-built_in">fun2</span>(); <span class="hljs-comment">// 编译失败</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类模板成员函数的类外实现"><a href="#类模板成员函数的类外实现" class="headerlink" title="类模板成员函数的类外实现"></a>类模板成员函数的类外实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">person</span>(T1 name, T2 age);<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    T1 m_Name;<br>    T2 m_Age;<br>&#125;<br><br><span class="hljs-comment">// 构造函数，类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-type">void</span> Person&lt;T1, T2&gt;::<span class="hljs-built_in">Person</span>(T1 name, T2 age) &#123;<br>    <span class="hljs-keyword">this</span>.m_Name = name;<br>    <span class="hljs-keyword">this</span>.m_Age = age;<br>&#125;<br><br><span class="hljs-comment">// 成员函数，类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-type">void</span> Person&lt;T1, T2&gt;::<span class="hljs-built_in">showPerson</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>.m_Name &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; age &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类模板作为函数参数"><a href="#类模板作为函数参数" class="headerlink" title="类模板作为函数参数"></a>类模板作为函数参数</h2><p>用类模板实例化出的对象向函数传递参数，有以下三种方式：</p><ul><li>指定传入的类型——直接显式对象的数据类型</li><li>参数模板化——将对象中的参数变为模板进行传递</li><li>整个类模板化——将实例模板化进行传递</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span> = <span class="hljs-type">int</span>&gt;<br><span class="hljs-keyword">class</span> Person &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(NameType name, AgeType age) &#123;<br>        <span class="hljs-keyword">this</span>.mName = name;<br>        <span class="hljs-keyword">this</span>.mAge = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>.mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>.mAge &lt;&lt; endl;<br>    &#125;<br><br>    NameType mName;<br>    AgeType mAge;<br>&#125;;<br><br><span class="hljs-comment">// 1.指定传入的类型</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson01</span><span class="hljs-params">(Person&lt;String, <span class="hljs-type">int</span>&gt; &amp;p)</span> </span>&#123;<br>    p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br><br><span class="hljs-comment">// 2.参数模板化</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T1, <span class="hljs-keyword">class</span> T2&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson02</span><span class="hljs-params">(Person&lt;T1, T2&gt; &amp;p)</span> </span>&#123;<br>    p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br><br><span class="hljs-comment">// 3.整个类模板化</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson03</span><span class="hljs-params">(T &amp;p)</span> </span>&#123;<br>    T.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类模板的继承"><a href="#类模板的继承" class="headerlink" title="类模板的继承"></a>类模板的继承</h2><p>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中虚拟类T的类型。如果不指定，编译器无法给子类分配内存。如果想灵活指定父类中T的类型，子类也需要定义为模板类。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>    T m;<br>&#125;;<br><br><span class="hljs-comment">// class Son: public Base // 错误，必须指定父类中T的类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>: <span class="hljs-keyword">public</span> Base&lt;<span class="hljs-type">int</span>&gt; &#123;<br><br>&#125;;<br><br><span class="hljs-comment">// 将子类也定义为模板类</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son02</span>: <span class="hljs-keyword">public</span> Base&lt;T2&gt; &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Son02</span>() &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类模板分文件编写"><a href="#类模板分文件编写" class="headerlink" title="类模板分文件编写"></a>类模板分文件编写</h2><p>类模板中成员函数在调用时才创建，导致分文件编写时链接不到</p><ul><li>解决方法一：直接包含.cpp源文件</li><li>解决方法二：将声明和实现写到同一个文件中，并更改后缀名为.hpp。该后缀名为约定的名称，不强制使用。<br><code>person.hpp</code>中的代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span> = <span class="hljs-type">int</span>&gt;<br><span class="hljs-keyword">class</span> Person &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(NameType name, AgeType age) &#123;<br>        <span class="hljs-keyword">this</span>.mName = name;<br>        <span class="hljs-keyword">this</span>.mAge = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>.mName &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>.mAge &lt;&lt; endl;<br>    &#125;<br><br>    NameType mName;<br>    AgeType mAge;<br>&#125;;<br><br><span class="hljs-comment">// 构造函数，类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-type">void</span> Person&lt;T1, T2&gt;::<span class="hljs-built_in">Person</span>(T1 name, T2 age) &#123;<br>    <span class="hljs-keyword">this</span>.m_Name = name;<br>    <span class="hljs-keyword">this</span>.m_Age = age;<br>&#125;<br><br><span class="hljs-comment">// 成员函数，类外实现</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-type">void</span> Person&lt;T1, T2&gt;::<span class="hljs-built_in">showPerson</span>() &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;name: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>.m_Name &lt;&lt; <span class="hljs-string">&quot; age: &quot;</span> &lt;&lt; age &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>类模板分文件中.cpp代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// #include &quot;person.cpp&quot; // 解决方法一：直接包含.cpp文件</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;person.hpp&quot;</span> <span class="hljs-comment">// 解决方法二：将声明和实现写到同一个文件中</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Person&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">7</span>)</span></span>;<br>    p.<span class="hljs-built_in">showPerson</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>主流的解决方法是第二种。</p><h2 id="类模型与友元"><a href="#类模型与友元" class="headerlink" title="类模型与友元"></a>类模型与友元</h2><ul><li>全局函数类内实现——直接在类内声明友元即可</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    T value;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>(T val) : <span class="hljs-built_in">value</span>(val) &#123;&#125;<br><br>    <span class="hljs-comment">// 全局函数类内实现，直接访问私有成员</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> MyClass&lt;T&gt;&amp; obj)</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; obj.value &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">MyClass&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-built_in">show</span>(obj);  <span class="hljs-comment">// 输出: Value: 10</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>全局函数类外实现——需要提前让编译器知道全局函数存在<br>没有事先声明的错误示例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    T value;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>(T val) : <span class="hljs-built_in">value</span>(val) &#123;&#125;<br><br>    <span class="hljs-comment">// 声明友元函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> MyClass&lt;T&gt;&amp; obj)</span></span>;<br>&#125;;<br><br><span class="hljs-comment">// 类外定义友元函数</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> MyClass&lt;T&gt;&amp; obj)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; obj.value &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">MyClass&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-built_in">show</span>(obj);  <span class="hljs-comment">// 输出: Value: 10</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>报错如下：<br><img src="/./images/%E6%A8%A1%E6%9D%BF/%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E4%B8%8E%E6%A8%A1%E6%9D%BF%E7%B1%BB.png" alt="友元函数与模板类"><br>正确写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>;<br><br><span class="hljs-comment">// 先声明函数模板</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> MyClass&lt;T&gt;&amp; obj)</span></span>;<br><br><span class="hljs-comment">// 类模板定义</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    T value;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>(T val) : <span class="hljs-built_in">value</span>(val) &#123;&#125;<br><br>    <span class="hljs-comment">// 声明为友元函数（必须使用已有声明）</span><br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-built_in">show</span>&lt;T&gt;(<span class="hljs-type">const</span> MyClass&lt;T&gt;&amp; obj);<br>&#125;;<br><br><span class="hljs-comment">// 类外定义</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> MyClass&lt;T&gt;&amp; obj)</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; obj.value &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">MyClass&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">42</span>)</span></span>;<br><span class="hljs-built_in">show</span>(obj); <span class="hljs-comment">// 调用友元函数</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>非模板类中的友元函数无需提前声明函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">42</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 不需要提前声明</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> MyClass&amp; obj)</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> MyClass&amp; obj)</span> </span>&#123;<br>    std::cout &lt;&lt; obj.x &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递增运算符重载</title>
    <link href="/2025/05/17/%E9%80%92%E5%A2%9E%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <url>/2025/05/17/%E9%80%92%E5%A2%9E%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>递增运算符分为前置和后置两种，下面的代码块中分别展示了两种递增运算符。其中，等式1展示了前置递增运算符，变量a首先进行递增操作，其值变为1，再赋值给变量b，此时b的值为1。等式2展示了后置运算符，变量a在递增前值为1，先复制给变量b，b的值此时为1，再对a进行递增操作，将a的值增加到2。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b = ++a; # 等式<span class="hljs-number">1</span><br><span class="hljs-type">int</span> b = a++; # 等式<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="重载递增运算符"><a href="#重载递增运算符" class="headerlink" title="重载递增运算符"></a>重载递增运算符</h1><h2 id="创建自己的整形类"><a href="#创建自己的整形类" class="headerlink" title="创建自己的整形类"></a>创建自己的整形类</h2><p>为了重载递增运算符，我们需要创建一个自己的整形类<code>MyInteger</code>，其包含一个<code>int</code>类型的成员变量<code>num</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span><br>&#123;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MyInteger</span>()<br>&#123;<br>num = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> num;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="重载前置递增运算符"><a href="#重载前置递增运算符" class="headerlink" title="重载前置递增运算符"></a>重载前置递增运算符</h2><p>前置递增运算符先进行递增操作，再进行赋值操作。其递增后的结果需要返回给函数，因此应当将返回值的类型设置为引用类型，即<code>MyInteger&amp;</code>，返回的是当前对象。重载的前置递增运算符如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">MyInteger&amp; <span class="hljs-keyword">operator</span>++()<br>&#123;<br>    num++;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重载后置递增运算符"><a href="#重载后置递增运算符" class="headerlink" title="重载后置递增运算符"></a>重载后置递增运算符</h2><p>后置递增运算符先进行赋值操作，再进行递增操作。其返回的是递增前的结果，因此应当拷贝递增前的对象，再对原对象进行递增操作，将拷贝结果作为函数返回值。重载的后置递增运算符如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">MyInteger <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>)<br>&#123;<br>    MyInteger temp = *<span class="hljs-keyword">this</span>;<br>    num++;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重载输出运算符"><a href="#重载输出运算符" class="headerlink" title="重载输出运算符"></a>重载输出运算符</h2><p>为了验证重载后的递增运算符的有效性，我们重载输出运算符，以输出实验结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInteger myInt)<br>&#123;<br>cout &lt;&lt; myInt.num;<br><span class="hljs-keyword">return</span> cout;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>首先使用如下代码块测试前置递增运算符的实验结果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyInteger myInt;<br>cout &lt;&lt; ++myInt &lt;&lt; endl; <span class="hljs-comment">// 调用前置递增运算符</span><br>cout &lt;&lt; myInt &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<br>1<br></code></pre></td></tr></table></figure><p>使用如下代码测试后置递增运算符的实验结果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyInteger myInt;<br>cout &lt;&lt; myInt++ &lt;&lt; endl; <span class="hljs-comment">// 调用后置递增运算符</span><br>cout &lt;&lt; myInt &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">0<br>1<br></code></pre></td></tr></table></figure><p>实验结果表明重载成功。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span><br>&#123;<br><br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInteger myInt);<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MyInteger</span>()<br>&#123;<br>num = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 前置递增运算符</span><br>MyInteger&amp; <span class="hljs-keyword">operator</span>++()<br>&#123;<br>++num;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">// 后置递增运算符</span><br>MyInteger <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>)<br>&#123;<br>MyInteger temp = *<span class="hljs-keyword">this</span>; <span class="hljs-comment">// 先保存当前对象的状态</span><br>num++;<br><span class="hljs-keyword">return</span> temp; <span class="hljs-comment">// 返回递增前的对象</span><br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> num;<br>&#125;;<br><br><span class="hljs-comment">// 重载输出运算符</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInteger myInt)<br>&#123;<br>cout &lt;&lt; myInt.num;<br><span class="hljs-keyword">return</span> cout;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyInteger myInt;<br>cout &lt;&lt; ++myInt &lt;&lt; endl; <span class="hljs-comment">// 调用前置递增运算符</span><br>cout &lt;&lt; myInt &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyInteger myInt;<br>cout &lt;&lt; myInt++ &lt;&lt; endl; <span class="hljs-comment">// 调用后置递增运算符</span><br>cout &lt;&lt; myInt &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test2</span>();<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客</title>
    <link href="/2025/05/16/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/05/16/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo环境配置"><a href="#Hexo环境配置" class="headerlink" title="Hexo环境配置"></a>Hexo环境配置</h1><p>hexo是一个静态博客框架，借助它可以帮助我们将Markdown编写的博客渲染成静态HTML页面。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>hexo是基于Node.js的，因此我们在安装hexo之前需要安装Node.js和npm，再通过npm安装hexo。直接打开<a href="https://nodejs.org/zh-cn">Node.js官网</a>，下载Node.js软件进行安装。<br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Node_js%E5%AE%98%E7%BD%91.png" alt="Node.js官网"><br>Node.js安装的同时会自动安装node和npm两个工具，使用如下命令检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><p>如果能成功输出版本号，则安装成功。使用如下命令查看npm是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm -v<br></code></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>使用npm进行安装。首先将npm替换为国内源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com <br></code></pre></td></tr></table></figure><p>接着使用如下命令安装hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>hexo安装完成后，执行如下命令对博客所在文件夹进行初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init 博客所在文件夹的路径<br></code></pre></td></tr></table></figure><p>进入博客所在文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 博客所在文件夹的路径<br></code></pre></td></tr></table></figure><p>然后安装相关依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p>hexo环境配置完成！</p><h1 id="hexo管理博客的方法"><a href="#hexo管理博客的方法" class="headerlink" title="hexo管理博客的方法"></a>hexo管理博客的方法</h1><p>执行如下两条命令，运行hexo服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br>hexo server<br></code></pre></td></tr></table></figure><h1 id="利用Github-Pages托管博客"><a href="#利用Github-Pages托管博客" class="headerlink" title="利用Github Pages托管博客"></a>利用Github Pages托管博客</h1><p>我们希望能够在线浏览博客，因此将博客托管到Github仓库。</p><h2 id="将博客托管到Github"><a href="#将博客托管到Github" class="headerlink" title="将博客托管到Github"></a>将博客托管到Github</h2><p>在Github上创建一个项目，项目名设置为<code>你的Github用户名.githun.io</code>。<br>创建完成后Github会给出快速设置仓库的指令，如下图所示。依次执行图中的指令，将其中<code>git add README.md</code>命令替换为<code>git add .</code>。<br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%BF%AB%E9%80%9F%E8%AE%BE%E7%BD%AEGithub%E4%BB%93%E5%BA%93.png" alt="快速设置Github仓库"></p><h2 id="使用Github-Pages部署博客"><a href="#使用Github-Pages部署博客" class="headerlink" title="使用Github Pages部署博客"></a>使用Github Pages部署博客</h2><p>这一步需要修改hexo的配置文件，在你的博客所在文件夹下打开<code>_config.yml</code>配置文件，修改type配置项，具体修改如下图所示。其中<code>repository</code>需要修改为你自己的地址：<br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo%E9%85%8D%E7%BD%AE.png" alt="hexo配置"><br>最后执行<code>npm install hexo-deployer-git --save</code>命令，安装插件简化部署流程。</p><p>使用<code>hexo new post 文章标题</code>命令可以在<code>source/_post</code>文件夹下生成博客的Markdown文件，用于博客的撰写。写完后，可以使用如下命令将博客发布到Github Pages上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <span class="hljs-comment"># 清楚缓存</span><br>hexo generate <span class="hljs-comment"># 生成渲染</span><br>hexo deploy <span class="hljs-comment"># 部署到Github Pages上</span><br></code></pre></td></tr></table></figure><p>发布完成后，可以在<code>https://github用户名.github.io/</code>网址上访问在线博客。<br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%AE%BF%E9%97%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.png" alt="访问个人博客"></p><h1 id="使用Cloudflare加速访问"><a href="#使用Cloudflare加速访问" class="headerlink" title="使用Cloudflare加速访问"></a>使用Cloudflare加速访问</h1><p>国内访问Github非常不稳定，因此使用Cloudflare代理进行加速。首先打开<a href="https://www.cloudflare.com/zh-cn/">Cloudflare</a>，在左侧找到Workers和Pages，切换到Pages栏，选择导入现有Git存储库，选择我们的博客仓库授权即可：<br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/Couldflare%E5%8A%A0%E9%80%9F.png" alt="Couldflare加速.png"><br>部署完成后，点击继续处理项目。下图中红框位置即为分配的域名：<br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%86%E9%85%8D%E5%9F%9F%E5%90%8D.png" alt="分配域名"></p><h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><p>以Fluid主题为例，首先下载<a href="https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file">Fluid主题最新release版本</a>。然后将其解压到themes目录下，并将解压后的文件夹命名为<code>fluid</code>。<br>修改<code>_config.yml</code>文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span> <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment"># 指定语言</span><br></code></pre></td></tr></table></figure><p>创建关于页：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建之后，编辑博客目录下的<code>./source/about/index.md</code>，添加<code>layout</code>属性：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">title: <span class="hljs-keyword">about</span><br><span class="hljs-keyword">layout</span>: <span class="hljs-keyword">about</span><br></code></pre></td></tr></table></figure><h1 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h1><p>原本想要使用<a href="https://github.com/apps/utterances">utterances插件</a>添加评论功能，但一直无法加载，于是更换为giscus。首先进入<a href="https://github.com/apps/giscus">giscus</a>，点击<code>Install</code>进行安装，然后选择对应的仓库即可，这里我已经安装过了，不再展示。</p><p>接着点击<a href="https://giscus.app/zh-CN">giscus配置</a>，输入你的仓库地址即可生成对应的信息，根据生成信息修改对应的配置文件：<br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/giscus%E4%BB%93%E5%BA%93%E8%AE%BE%E7%BD%AE.png" alt="giscus仓库设置"><br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%BC%80%E5%90%AFcomments%E5%8A%9F%E8%83%BD.png" alt="开启comments功能"><br><img src="/./images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/giscus%E9%85%8D%E7%BD%AE.png" alt="giscus配置"></p><p>接着修改<code>fluid</code>文件夹下的<code>_config.yml</code>文件，填入以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">GitHub用户名/GitHub用户名.github.io</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">title</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span>    <br></code></pre></td></tr></table></figure><p>最后重新发布服务，博客添加评论功能成功。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://tyxiaoming.xin/2025/01/21/%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%8D%9A%E5%AE%A2/">搭建免费个人博客：Cloudflare+GitHub+Hexo Fluid</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
